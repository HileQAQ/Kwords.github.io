<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/01/10/article-title/"/>
    <url>/2021/01/10/article-title/</url>
    
    <content type="html"><![CDATA[<p>A：给出一个序列，问能否找出一些点，使得相邻两个数的最小值组成的序列非递减。<br>首先考虑最长非递减子序列，每个数之间最多能够插入一个比两侧大的数，超过两个就不合法，可以手推或者脑补一下。因此在选择状态转移的时候如果有多个最大值，要选取下标最小的一个，思考一下，如果dp值相同，下标更小的数一定更大，因为后面有更大的数那么可以从这个数进行转移。所以用线段树维护两个数，第一个为dp值，第二个为该位置的值，用last数组表示上一次这个数出现的位置，如果这段区间内有比两侧的数都大的数，那么答案可以为+2，否则+1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">5e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-keyword">int</span> a[maxn],last[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Seg</span>&#123;</span><br>    <span class="hljs-keyword">int</span> t[maxn&lt;&lt;<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">int</span> m[maxn&lt;&lt;<span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(l==r) &#123;<br>            t[p]=<span class="hljs-number">0</span>;<br>            m[p]=l;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        build(p&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>        build(p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>        t[p]=max(t[p&lt;&lt;<span class="hljs-number">1</span>],t[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span>(t[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]&gt;=t[p&lt;&lt;<span class="hljs-number">1</span>]) m[p]=m[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">else</span> m[p]=m[p&lt;&lt;<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> in,<span class="hljs-keyword">int</span> v)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(l==r)&#123;<br>            t[p]=max(t[p],v);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(in&lt;=mid) update(p&lt;&lt;<span class="hljs-number">1</span>,l,mid,in,v);<br>        <span class="hljs-keyword">else</span> update(p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,in,v);<br>        t[p]=max(t[p&lt;&lt;<span class="hljs-number">1</span>],t[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span>(t[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]&gt;=t[p&lt;&lt;<span class="hljs-number">1</span>]) m[p]=m[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">else</span> m[p]=m[p&lt;&lt;<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-function">pii <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> ql,<span class="hljs-keyword">int</span> qr)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(qr&lt;ql) <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">if</span>(ql&lt;=l&amp;&amp;qr&gt;=r) <span class="hljs-keyword">return</span> &#123;t[p],m[p]&#125;;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        pii res=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">if</span>(ql&lt;=mid)&#123;<br>            pii tmp=query(p&lt;&lt;<span class="hljs-number">1</span>,l,mid,ql,qr);<br>            <span class="hljs-keyword">if</span>(tmp.first&gt;res.first) res=tmp;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmp.first==res.first&amp;&amp;tmp.second&gt;res.second) res=tmp;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(qr&gt;mid)&#123;<br>            pii tmp=query(p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,ql,qr);<br>            <span class="hljs-keyword">if</span>(tmp.first&gt;res.first) res=tmp;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmp.first==res.first&amp;&amp;tmp.second&gt;res.second) res=tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;dp;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Seg2</span>&#123;</span><br>    <span class="hljs-keyword">int</span> t[maxn&lt;&lt;<span class="hljs-number">2</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(l==r) &#123;<br>            t[p]=a[l];<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        build(p&lt;&lt;<span class="hljs-number">1</span>,l,mid);<br>        build(p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r);<br>        t[p]=max(t[p&lt;&lt;<span class="hljs-number">1</span>],t[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> ql,<span class="hljs-keyword">int</span> qr)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(qr&lt;ql) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(ql&lt;=l&amp;&amp;qr&gt;=r) <span class="hljs-keyword">return</span> t[p];<br>        <span class="hljs-keyword">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(ql&lt;=mid) res=max(res,query(p&lt;&lt;<span class="hljs-number">1</span>,l,mid,ql,qr));<br>        <span class="hljs-keyword">if</span>(qr&gt;mid) res=max(res,query(p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>,r,ql,qr));<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;t;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    dp.build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    t.build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        pii res=dp.query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,a[i]);<br>        <span class="hljs-keyword">if</span>(res.first==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(t.query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,i)&gt;a[i]) res.first++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(t.query(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,last[res.second],i)&gt;a[i]) res.first++;<br>        &#125;<br>        dp.update(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,a[i],res.first+<span class="hljs-number">1</span>);<br>        last[a[i]]=i;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;dp.t[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-keyword">int</span> _=<span class="hljs-number">1</span>;<span class="hljs-built_in">cin</span>&gt;&gt;_;<br>    <span class="hljs-keyword">while</span>(_--)&#123;solve();&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>H：给出一个1到n的序列，以及一个b序列，每次操作可以选择k个数，k为奇数，将这些数中除了中位数外的数消去，问能否让这个序列转化为b序列。<br>一个比较显然的结论，如果存在一个不能被消去的数他的左边和右边至少有(k-1)/2个要消去的数，且要消去的总数是(k-1)的倍数，那么一定为yes。脑补一下，如果要消去的数大于k-1个，那么可以把要消的数作为中位数，不停消去直到最后一个不为要消去的数满足两侧都为(k-1)/2个要消去的数收尾即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">3e5</span>+<span class="hljs-number">5</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,k,m;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;m;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v,vis(n);<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-keyword">int</span> x;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;x;<br>        vis[x<span class="hljs-number">-1</span>]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-keyword">if</span>(!vis[i])<br>            v.push_back(i);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=k/<span class="hljs-number">2</span>;i&lt;v.size();i++)&#123;<br>        <span class="hljs-keyword">if</span>(v.size()%(k<span class="hljs-number">-1</span>)==<span class="hljs-number">0</span>&amp;&amp;v[i]!=v[i<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>&amp;&amp;v.size()-i&gt;=k/<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"YES\n"</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"NO\n"</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-keyword">int</span> _=<span class="hljs-number">1</span>;<span class="hljs-built_in">cin</span>&gt;&gt;_;<br>    <span class="hljs-keyword">while</span>(_--)&#123;solve();&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>M：给出n个数组，每个数组有一些数，问能否找到两个数组至少有两个数相同？<br>一道比较有趣且套路的题。<br>观察数据范围，数和数组的个数不超过1e5，可以发现当一个数组中有很多数时，那么数组个数肯定不会很多，因此可以根据sqrt(n)将数组划分为两块，每个大数组和其他的数组进行比较，不会超过sqrt(n)<em>n次就可以完成查找。小数组之间怎么比较呢？对于每个数可以将比这个数大的数放到数组里，如果一个数对应的数组中出现了两个相同的数且来自不同的数组，那么即查找成功，因为数字总数不会超过n，且每个数在数组中最多有sqrt(n)个数比他大，因此比较次数不超过sqrt(n)</em>n次，最终能在sqrt(n)*n的复杂度内求解。<br>比较套路的题，主要思想为按数据规模分类讨论，不同大小的数组用不同的处理方式。比较需要注意的是初始化以及垃圾回收，这部分容易超时。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">3e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;v[maxn],a,b,ve;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    a.clear();b.clear();ve.clear();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) &#123;<br>        v[i].clear();<br>        <span class="hljs-keyword">int</span> x;<span class="hljs-built_in">cin</span>&gt;&gt;x;<br>        <span class="hljs-keyword">while</span>(x--)&#123;<br>            <span class="hljs-keyword">int</span> y;<span class="hljs-built_in">cin</span>&gt;&gt;y;<br>            v[i].push_back(y);<br>            ve.push_back(y);<br>        &#125;<br>        sort(v[i].begin(),v[i].end());<br>        v[i].erase(unique(v[i].begin(),v[i].end()),v[i].end());<br>    &#125;<br>    sort(ve.begin(),ve.end());<br>    ve.erase(unique(ve.begin(),ve.end()),ve.end());<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;w(ve.size()+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;vis(ve.size()+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> &amp; j : v[i])<br>            j=lower_bound(ve.begin(),ve.end(),j)-ve.begin()+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> sz=<span class="hljs-built_in">sqrt</span>(ve.size());<br>    <span class="hljs-built_in">vector</span>&lt;pii&gt;c[ve.size()+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(v[i].size()&gt;sz) a.push_back(i);<br>        <span class="hljs-keyword">else</span> b.push_back(i);<br>    &#125;<br>    fill(w.begin(),w.end(),<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a.size();i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j:v[a[i]]) w[j]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>;j&lt;a.size();j++)&#123;<br>            <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k:v[a[j]]) <span class="hljs-keyword">if</span>(w[k]) cnt++;<br>            <span class="hljs-keyword">if</span>(cnt&gt;=<span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;a[j]&lt;&lt;<span class="hljs-string">'\n'</span>;<br>                <span class="hljs-keyword">return</span> ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;b.size();j++)&#123;<br>            <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k:v[b[j]]) <span class="hljs-keyword">if</span>(w[k]) cnt++;<br>            <span class="hljs-keyword">if</span>(cnt&gt;=<span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;b[j]&lt;&lt;<span class="hljs-string">'\n'</span>;<br>                <span class="hljs-keyword">return</span> ;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j:v[a[i]]) w[j]=<span class="hljs-number">0</span>;<br>    &#125;<br>    fill(w.begin(),w.end(),<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i:b)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;v[i].size();k++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> kk=k+<span class="hljs-number">1</span>;kk&lt;v[i].size();kk++)&#123;<br>                <span class="hljs-keyword">if</span>(v[i][kk]&gt;v[i][k]) c[v[i][k]].push_back(&#123;v[i][kk],i&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i:b)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j:v[i])&#123;<br>            <span class="hljs-keyword">if</span>(!vis[j])&#123;<br>                vis[j]=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">for</span>(pii k:c[j])&#123;<br>                    <span class="hljs-keyword">if</span>(w[k.first])&#123;<br>                        <span class="hljs-keyword">for</span>(pii kk:c[j])&#123;<br>                            <span class="hljs-keyword">if</span>(kk.first==k.first)&#123;<br>                                <span class="hljs-built_in">cout</span>&lt;&lt;kk.second&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;k.second&lt;&lt;<span class="hljs-string">'\n'</span>;<br>                                <span class="hljs-keyword">return</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    w[k.first]=<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">for</span>(pii k:c[j]) w[k.first]=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"-1\n"</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-keyword">int</span> _=<span class="hljs-number">1</span>;<span class="hljs-built_in">cin</span>&gt;&gt;_;<br>    <span class="hljs-keyword">while</span>(_--)&#123;solve();&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/10/hello-world/"/>
    <url>/2021/01/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
